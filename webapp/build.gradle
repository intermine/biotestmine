apply plugin: "war"
apply plugin: "webapp"
apply plugin: "com.bmuschko.cargo"

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

configurations {
    onlyRunTime
    tomcat
}

dependencies {
    compile (project(":dbmodel")) {transitive = false}
    compile group: "org.intermine", name: "bio-core", version: System.getProperty("bioVersion"), transitive: false
    compile group: "org.intermine", name: "intermine-api", version: System.getProperty("imVersion")
    compile group: "org.intermine", name: "intermine-webapp", version: System.getProperty("imVersion"), classifier: "classes"
    compile group: "org.intermine", name: "intermine-webtasks", version: System.getProperty("imVersion")
    onlyRunTime group: 'org.intermine', name: 'bluegenes', version: System.getProperty("blueGenesVersion")
    tomcat "org.apache.tomcat:tomcat:8.5.31@zip"
}

def explodedWebAppDir = "$buildDir/explodedWebApp"
def mergePropsDir = "$buildDir/props"

webappConfig {
    mineName = "biotestmine"
    objectStoreName = "os.production"
    userProfileObjectStoreName = "os.userprofile-production"
    userProfileObjectStoreWriterName = "osw.userprofile-production"
    defaultInterminePropertiesFile = "default.intermine.production.properties"
    propsDir = "$mergePropsDir"
}

war {
    dependsOn 'mergeProperties', 'summariseObjectStore', 'unwarBioWebApp', 'addStrutsConfig'
    finalizedBy 'warWebApp'
}

task warWebApp(type: War) {
    dependsOn 'copyWebappContent'
    description "Create the war from the build/explodedWebAppDir directory"
    from {"${explodedWebAppDir}"}
    exclude "WEB-INF/web.properties"
    webInf { from "${mergePropsDir}" }
}

task copyWebappContent(type: Copy) {
    from "src/main/webapp/"
    into "${explodedWebAppDir}"
}

// read in biotestmine.properties to get the contextPath
def props = new Properties()
file(minePropertyFile).withInputStream { props.load(it) }

// ---------------------------------------------------------------------------------------------------------------------
// Use cargo to deploy the webapp to an existing Tomcat instance, either via the HTTP Tomcat manager or local file copy.
// ---------------------------------------------------------------------------------------------------------------------
cargo {

    // change this to match your Tomcat major version (keep the x)
    containerId = 'tomcat8x'
    int remotePort = 8080
    if (props.getProperty("webapp.port") != null) {
        remotePort = props.getProperty("webapp.port").toInteger()
    }

    // change this to the Tomcat root of your choice
    deployable {
        context = props.getProperty("webapp.path")
    }

    def remoteHostName = "localhost"

    // if "hostname" is defined in properties file, use that
    if (props.getProperty("webapp.hostname") != null) {
        remoteHostName = props.getProperty("webapp.hostname")
    } else {
        remoteHostName = getServerName(props.getProperty("webapp.deploy.url"))
    }

    def remoteProtocol = "http"

    // if "protocol" is defined in properties file, use that
    if (props.getProperty("webapp.protocol") != null) {
        remoteProtocol = props.getProperty("webapp.protocol")
    }

    // change these to match your Tomcat host and tomcat-users config
    remote {
        hostname = remoteHostName
        protocol = remoteProtocol
        username = props.getProperty("webapp.manager")
        password = props.getProperty("webapp.password")
        port = remotePort
    }

    local {
        installer {
            installConfiguration = configurations.tomcat
            downloadDir= file("$buildDir/downloads")
            extractDir = file("$buildDir/extracts")
        }
        jvmArgs = '-Dorg.apache.el.parser.SKIP_IDENTIFIER_CHECK=true'
    }
}

cargoStartLocal.dependsOn war
cargoRunLocal.dependsOn war
cargoRedeployLocal.dependsOn war
cargoDeployRemote.dependsOn war
cargoRedeployRemote.dependsOn war

// gets the hostname from the old intermine parameter, e.g. http://localhost:8080 > localhost
String getServerName(String deployUrl) {
    // chop off protocol
    if (deployUrl != null && deployUrl.indexOf("/") >= 0) {
        // https:// or http://
        deployUrl = deployUrl.substring(deployUrl.indexOf("/") + 2, deployUrl.length())
    }

    // chop off port
    if (deployUrl != null && deployUrl.contains(":")) {
        // localhost:8080
        String[] bits = deployUrl.split(":")
        deployUrl = bits[0]
    }

    return deployUrl
}


task blueGenesStart(type: JavaExec) {
    classpath = configurations.onlyRunTime
    main = "bluegenes.core"
    environment("bluegenes-default-service-root", props.getProperty("webapp.baseurl") + "/" + props.getProperty("webapp.path"))
    environment("bluegenes-default-namespace", props.getProperty("webapp.path"))
    environment("bluegenes-default-mine-name", props.getProperty("project.title"))
    environment("bluegenes-jar-version", System.getProperty("blueGenesVersion"))
}
